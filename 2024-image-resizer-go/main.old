package main

import (
	"bytes"
	"encoding/base64"
	"image"
	"image/jpeg"
	"log"
	"net/http"
	"os/exec"
	"strconv"

	"github.com/nfnt/resize"
	_ "golang.org/x/image/webp"
)

func main() {
	http.HandleFunc("/", uploadHandler)
	log.Println("Server started on http://localhost:8081")
	log.Fatal(http.ListenAndServe(":8081", nil))
}

func uploadHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		w.Write([]byte(`
			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Image Resizer</title>
			</head>
			<body>
				<h1>Upload an image to resize</h1>
				<form method="POST" enctype="multipart/form-data">
					<input type="file" name="image" accept="image/*">
					<br><br>
					<label for="width">Width:</label>
					<input type="number" name="width" value="600">
					<br><br>
					<input type="submit" value="Upload and Resize">
				</form>
			</body>
			</html>
		`))
	} else if r.Method == "POST" {
		r.ParseMultipartForm(10 << 20)

		file, _, err := r.FormFile("image")
		if err != nil {
			http.Error(w, "Invalid file upload", http.StatusBadRequest)
			return
		}
		defer file.Close()

		img, _, err := image.Decode(file)
		if err != nil {
			http.Error(w, "Invalid image format", http.StatusBadRequest)
			return
		}

		widthStr := r.FormValue("width")
		width, err := strconv.Atoi(widthStr)
		if err != nil {
			http.Error(w, "Invalid width value", http.StatusBadRequest)
			return
		}

		resizedImg := resize.Resize(uint(width), 0, img, resize.Lanczos3)

		var buf bytes.Buffer
		err = jpeg.Encode(&buf, resizedImg, nil)
		if err != nil {
			http.Error(w, "Failed to encode image", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "text/html")
		w.Write([]byte(`
			<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<title>Resized Image</title>
			</head>
			<body>
				<h1>Resized Image</h1>
				<img src="data:image/jpeg;base64,` + base64.StdEncoding.EncodeToString(buf.Bytes()) + `" alt="Resized Image">
				<br><br>
				<a href="/">Resize Another Image</a>
			</body>
			</html>
		`))
	}
}

func convertToWebP(input []byte) ([]byte, error) {
	cmd := exec.Command("cwebp", "-q", "90", "-o", "/dev/stdout", "--", "/dev/stdin")
	cmd.Stdin = bytes.NewReader(input)
	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		return nil, err
	}
	return out.Bytes(), nil
}
